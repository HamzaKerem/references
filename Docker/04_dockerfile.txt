"Dockerfile" used to set up the img

FROM baseImage # set the base image to use

WORKDIR /app # set working dir where RUN cmds are to be executed

COPY . . # First dot tells docker that all files in the dir and subdirs 
# should be copied into img. Second dot is the path inside of the img where the files should
# be stored.
COPY . /app # All files in the dir and subdirs are copied into /app

RUN npm install # run the cmd in the working dir

EXPOSE 80 # expose specific port number for the local machine to interact with
# (optional yet recommended)

CMD ["node", "server.js"] # do not execute when img is created
# execute when a container is started based on the img
# If no CMD is specified, CMD of base img is executed
# CMD is always last instruction

.....
`docker build .`
`docker run -p LOCAL_PORT:EXPOSE_PORT IMG_ID` -p for publish

FROM node:TAG # i.e. node:14.9.0-stretch
docker build -t IMG_NAME:TAG . # i.e. myshell:latest

~~~~~~~~~~~~
FROM node:12
WORKDIR /app
COPY package.json /app
RUN npm install
COPY . /app
EXPOSE 80
CMD ["node", "server.js"]
~~~~~~~~~~

.dockerignore # Files listed in this file are ignored by Dockerfile
Example content:
Dockerfile
.git

Env vars (in dockerfile):
...
ENV PORT 80
EXPOSE $PORT
...
OR
docker run .... --env PORT=8000
OR (in .env file)
PORT=8000
..
docker run --env-file ./.env

DO NOT INCLUDE PRIVATE DATA DIRECTLY IN THE DOCKERFILE
`docker history IMG` see img history # will show private data from dockerfile if existent
Instead use `--env-file credentials.env` and do not source control credentials.env

Build time args:
....
FROM ...
ARG DEFAULT_PORT=80
..
ENV PORT $DEFAULT_PORT
....
docker run ... --build-arg DEFAULT_PORT=666

....
FROM IMG as STAGE_NAME
...
docker build --target STAGE_NAME . # build specific stage
