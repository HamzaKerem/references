create a deployment.yaml file:

apiVersion: apps/v1
kind: Deployment # set obj type: Deployment, Service, Job, etc.
metadata: 
  name: second-app-deployment # https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.24/#objectmeta-v1-meta
spec: # this spec refers to the config. of deployment
  replicas: 3 # 3 equal pods containing the same cntr
  selector: # 
    matchLabels:
      app: second-app # tells deployment obj to control this pod w/ the 
      # corresponding key and value
      tier: backend
    # Can also use the following as an alternative:
    # Available operators are In, NotIn, etc.
    matchExpressions:
      - {key: app, operator: In, values: [second-app, first-app]}
      

  template: # define the pod object to create
    metadata:
      labels:
        app: second-app # add a (key) label named "app" and value "second-app"
        tier: backend # can have multiple labels. key and value name is arbitrary
    spec: 
      containers:  
        - name: second-nodejs
          image: USERNAME/IMG
          env:
            - name: MYDIR # MYDIR env var
              value: 'story'
            - name: AUTH_ADDRESS
              # service name + '.' + namespace (CoreDNS for networking):
              value: "auth-service.default" 
              # Or use:
              valueFrom: 
                configMapKeyRef: 
                  # from "name" key in environment.yaml
                  name: data-store-env 
                  # which value to set as the name for "story" folder:
                  key: folder
          volumeMounts:
            - mountPath: /app/story # define mount path for vol.
              name: myvol
          # The following defines how k8s should verify whether the cntr
          # is up and running
          livenessProbe: 
            httpGet:
              path: /
              port: 8080
            periodSeconds: 3
            initialDelaySeconds:
        # Define volumes as the following:
        volumes:
          - name: myvol
            # This is for regular volumes:
            emptyDir: {} # does not need special config options
            # OR
            hostPath:
              path: /data
              # create dir defined as path if not existent:
              type: DirectoryOrCreate 
            # This is for persistent volumes:
            persistentVolumeClaim:
              claimName: host-pvc


Remember that a deployment object continously watches for all pods and sees which it
should control. Selects the pods to control accoriding to a "selector"

kubectl apply -f=deployment.yaml
