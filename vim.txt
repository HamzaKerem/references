Quick notes:                 
This program is very important for becoming a true super user.
Set bash to vi mode: set -o vi
see: vimtutor , :help user-manual , :help <subject>

Basics:
hjklm: movement
e: move to the end of the word
w: move to the start of the next word
b: move to the start of the previous word 
u: undo last command
CTRL-r: redo undone
U: undo whole line
ZZ: write buffer and quit
Command Syntax: [Count]<Operator><Motion>

Command Mode:
w - write
r - read
e - edit
! - override
ESC - abort command/operation

Operators:
d: delete line
x: delete character
r<char>: replace 
c<motion>: change (delete and enter insert mode; 'ce' is useful)
C: delete line and enter insert mode
f<char>: search rightwards for <char> in line 
F<char>: search leftwards for <char> in line 
t<char>: search rightwards till <char> is met in line (equivilant to 'f' but places cursor 1 character ahead)
T<char>: search leftwards till <char> is met in line (equivilant to 'F' but places cursor 1 character behind)

Motions:
w: to start of next word
e: to start of current word
b: to start of previous word
$: to the end of the line
^: to the start of the sentence
0: to the start of the line

Advanced Motions:
o: open a line below the cursor and enter insert mode
O: open a line above the cursor and enter insert mode
a: append (where the cursor is)
A: move cursor to the end of line and append
I: move cursor to the beginning of line and append 
('A' and 'I' work well with Visual Block mode)
J: join lines
Ctrl-U (in insert mode): kill line up to cursor (equivilant to d0)

File Status:
Ctrl+G: show location
gg: move to the start of the file
G: to the end of the file
<Line Number>G: move to line number

Searching:
/<search word>: search forwards 
('?' to start searching the other direction. Must escape special characters: .*[]()...)
?<search word>: search backwards
(press enter; n: show next, N: show previous; precede n/N with a count if neccessary)

Subsitituion:
s/<search>/<replace>: search and replace first instance on the
current line
s/<search>/<replace>/g: search and replace all instance on the
current line; 'g' stands for global.
<line number>,<line number>s/<s>/<r>/g: search within given line numbers
%s/<search>/<replace>/g: search and replace all instance in the file 
%s/<search>/<replace>/g: search and replace all instance in the file and 
prompt user for confirmation 

External Command Execution and File Manipulation:
:!<CMD>: execute external command
:w <File>: save current file as <File>
:r <File>: insert contents of a file.
:r !<CMD>: insert output of an external command. 

Visual & Block Mode:
v: enter visual mode, select lines of text via operators (hjkl, w, b, etc.)
v + d: delete selected lines
v + :w <File>: write the selected portion of the file as <File>
CTRL-v: enter block mode
:help v_b_<command>: get help on a specific Visual Block command (i.e. v_b_c)

Replace Mode:
R: enter replace mode (which is like insert mode, but every 
typed character deletes an existing character)

Copy and Paste:
y: yank (use Visual Mode to utilize yanking)
p: put / paste after cursor
P: put / paste before cursor
xp: character twiddling / swapping
(Note: Vim registers are able to hold upto 26 clipboards.)

Set commands:
:set ic: set ignore case for search 
:set hls: set highlight search
:set is: set partial-matching / incremental search
:set no<CMD>: disable previously set command
:set number: show line numbers

Command Completion:
:<CMD> CTRL-D: show completion menu (ESC to cancel)

Buffers & Editing multiple files:
vim file1 file2 file3: open up 3 files for editing
:[num] bn: buffer next (edit next file) num times
:[num] bp: buffer previous (edit previous file) num times 
:buffers: view list of files
:buffer N: switch to buffer #N
:e <File>: open <file> for editing 
:view <file>: view <file> in read-only mode
:autowrite: auto-write before editing next or previous buffer
:args: show current file
:first, :last, :next, :previous: self-explanatory (use when: vim file1 file2 file3)
(short for :writenext -> :wn)
CTRL-^: switch to editing alternate file
:hide: hide current buffer
(A buffer is a copy of the file you edit.
-: inactive, h: hidden, %: current, #: alternate, +: modified)

Page up and down:
CTRL-b: Page up 
CTRL-f: Page down 
CTRL-u: Page up 1/2 screen
CTRL-d: Page down 1/2 screen

Intermediate Commands:
.: execute last change command
~: Toggle case
q: record keystrokes / stop recording
@<char>: execute macro
z: center current line to be in the middle of the screen
:digraphs: See digraphs
CTRL-K<2 digraph characters>: Print digraph
m<char>: mark the cursor location as mark <char> (numbers work too)
`<char>: go to mark
'<char>: go to marked line (utilize it with other operators such as 'd')
:marks: see marks 
CTRL-J: jump to defenition of a program

Windows:
:[num] split: split window; new window is [num] lines
:[num] vsplit: split window vertically; new window is [num] lines
:exit: exit window
CTRL-W + j/k: switch to other window
(Note: You can yank and put from one window to another)
:new: split window; new window is empty
(Use 'sview' to view a file in new window)
CTRL-W + '+': increase window size
CTRL-W + '-': decrease window size
CTRL-W + '=': make all window sizes equal
[num]CTRL-W_: resize window to [num] lines

Programming Related:
:syntax on: turn on syntax highlighting
:set background?: show background value ('bg' is the short option for background)
:set background=light/dark: set background value
:set filetype=c: set filetype for current file
:set shiftwidth=4: set shiftwidth 
:set cindent: set C style indentation
:set smartindent: set indentation to be same as the preceding line 
:set autoindent: set indentation to be same as the preceding line 
Insert Mode + CTRL-d: reverse indent
>: indent by 1 shiftwidth (See: shiftwidth)
<: unindent by 1 shiftwidth
('[num]>>' to indent num lines. Utilize '>' with Visual Block mode or '%') 
=: indent text (position cursor on first '{', then execute '=%')
%: find matching parenthesis, bracket, comments, preprocessor directives, etc. 
(cursor must be on one of those) 
[num]K: open up man page of the selected word sectioned under section 'num' (cursor must be under the selected word)

Abbreviation:
:abbreviate ad advertisement: abbreviate 'advertisement' as 'ad'.
<insert abbreviation> + space: type out whole string
(Note: '<space>' tells vim to use the space character. i.e. :abbreviate space <space>)
:abbreviate: list all abbreviations

Mapping:
:map <key> <commands>: map <commands> to <key> (i.e. :map <F5> i{<ESC>ea}<ESC>)
(Note: <key> can be multiple keys or any string. A mapping will supersede a default vim command.)
:map: list all mappings

Controlling what backspace does:
:set backspace=indent/eol/start: select a single backspace value or combine them all instead by using commas inbetween values

Saving settings:
:mkvimrc <file>: writes all settings of the current session to <file>
:source <file>: read and set settings of the current session from <file>
(Note: the following initialization files are searched for when vim is launched, once the first one is found, settings
are loaded and none of the rest are read: ~/.vimrc, ~/_vimrc, ~/.exrc ~/_exrc. In fact, ~/.exrc was used by Vi.) 
:version: shows version and initialization file information

Commands to utilize more:
C: delete line and enter insert mode
I: move cursor to the beginning of line and append 
J: join lines
Ctrl-U (in insert mode): kill line up to cursor (equivilant to d0)
P: put / paste before cursor
:autowrite: auto-write before editing next or previous buffer
z: center current line to be in the middle of the screen

Notes:            
Look into Visual block + c & Visual block + A. Supposed to edit multiple lines but doesn't work.
Left off in chapter 7 under section "Location Items in a Program"
Left off section "Basic Command-Mode Commands", CH 9.
